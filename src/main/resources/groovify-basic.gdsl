//import com.intellij.patterns.PsiJavaPatterns
//import com.intellij.patterns.PlatformPatterns

def domainCtx = context(
        ctype: 'java.lang.Class'
        //ctype: PsiJavaPatterns.psiClass().withName(PlatformPatterns.string().matches(/.*/))
)

def instanceCtx = context(
        ctype: 'java.lang.Object'
)

private String extractParameter(def type) {
  def parameters = type.parameters
  if (!parameters || parameters.length != 1) return 'java.lang.Object'
  return parameters[0].canonicalText
}

contributor([domainCtx]) {

    String doc = ''
    doc = 'Load entity from DB, return "null" if not exists'

    method name: 'load',
           params: [id: 'java.lang.String'],
           type: extractParameter(psiType),
           doc: doc

    method name: 'load',
           params: [id: 'long'],
           type: extractParameter(psiType),
           doc: doc

    method name: 'load',
           params: [id: 'com.googlecode.objectify.Key'],
           type: extractParameter(psiType),
           doc: doc

    doc = 'Load entity from DB, throws "com.googlecode.objectify.NotFoundException" exception if not exists'

    method name: 'get',
           params: [id: 'java.lang.String'],
           type: extractParameter(psiType),
           doc: doc

    method name: 'get',
           params: [id: 'long'],
           type: extractParameter(psiType),
           doc: doc

    method name: 'get',
           params: [id: 'com.googlecode.objectify.Key'],
           type: extractParameter(psiType),
           doc: doc

    method name: 'getAll',
           params: [ids: 'java.lang.Iterable<com.googlecode.objectify.Key>'],
           type: "java.util.List<${extractParameter(psiType)}>",
           doc: doc

    method name: 'update',
           params: [id: 'com.googlecode.objectify.Key', operation: {}],
           type: extractParameter(psiType),
           doc: doc
    method name: 'update',
           params: [id: 'java.lang.String', operation: {}],
           type: extractParameter(psiType),
           doc: doc
    method name: 'update',
           params: [id: 'long', operation: {}],
           type: extractParameter(psiType),
           doc: doc
}

contributor([instanceCtx]) {
    method name: 'update',
           params: [closure: {}],
           type: psiClass?.qualifiedName
}

